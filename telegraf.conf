# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "1s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


[[inputs.kafka_consumer]]
  ## Kafka brokers.
  brokers = ["$KAFKA_BROKER"]

  ## Topics to consume.
  topics = ["$KAFKA_TOPIC"]

  ## Name of the consumer group.
  consumer_group = "$KAFKA_CONSUMER_GROUP"

  ## Initial offset position; one of "oldest" or "newest".
  offset = "newest"

  ## Maximum length of a message to consume, in bytes (default 0/unlimited);
  ## larger messages are dropped
  max_message_len = 1000000

  ## Data format to consume.
  data_format = "influx"
  influx_parser_type = "upstream"



[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  urls = ["$INFLUXDB_URL"]

  ## Token for authentication.
  token = "$INFLUXDB_TOKEN"

  ## Organization is the name of the organization you wish to write to.
  organization = "$ORGANIZATION"

  ## Destination bucket to write into.
  bucket = "$BUCKET"

  ## Content-Encoding for write request body, can be set to "gzip" to
  content_encoding = "gzip"

[[outputs.mqtt]]
## MQTT Brokers
## The list of brokers should only include the hostname or IP address and the
## port to the broker. This should follow the format `[{scheme}://]{host}:{port}`. For
## example, `localhost:1883` or `mqtt://localhost:1883`.
## Scheme can be any of the following: tcp://, mqtt://, tls://, mqtts://
## non-TLS and TLS servers can not be mix-and-matched.
# servers = ["localhost:1883", ] # or ["mqtts://tls.example.com:1883"]
servers = ["mqtt://mqtt.maua.br:1883"]

## Protocol can be `3.1.1` or `5`. Default is `3.1.1`
# protocol = "3.1.1"
protocol = "5"

## MQTT Topic for Producer Messages
## MQTT outputs send metrics to this topic format:
## {{ .TopicPrefix }}/{{ .Hostname }}/{{ .PluginName }}/{{ .Tag "tag_key" }}
## (e.g. prefix/web01.example.com/mem/some_tag_value)
## Each path segment accepts either a template placeholder, an environment variable, or a tag key
## of the form `{{.Tag "tag_key_name"}}`. Empty path elements as well as special MQTT characters
## (such as `+` or `#`) are invalid to form the topic name and will lead to an error.
## In case a tag is missing in the metric, that path segment omitted for the final topic.
topic = '$ORGANIZATION/$DEVICE_TYPE/{{ .PluginName }}/{{.Tag "deviceId"}}/{{.Tag "direction"}}/{{.Tag "origin"}}'
# topic = "telegraf/mqtt"

## QoS policy for messages
## The mqtt QoS policy for sending messages.
## See https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.0.0/com.ibm.mq.dev.doc/q029090_.htm
##   0 = at most once
##   1 = at least once
##   2 = exactly once
qos = 0

## Keep Alive
## Defines the maximum length of time that the broker and client may not
## communicate. Defaults to 0 which turns the feature off.
##
## For version v2.0.12 and later mosquitto there is a bug
## (see https://github.com/eclipse/mosquitto/issues/2117), which requires
## this to be non-zero. As a reference eclipse/paho.mqtt.golang defaults to 30.
# keep_alive = 0

## username and password to connect MQTT server.
username = "public"
password = "public"

## client ID
## The unique client id to connect MQTT server. If this parameter is not set
## then a random ID is generated.
# client_id = ""

## Timeout for write operations. default: 5s
# timeout = "5s"

## Optional TLS Config
# tls_ca = "/etc/telegraf/ca.pem"
# tls_cert = "/etc/telegraf/cert.pem"
# tls_key = "/etc/telegraf/key.pem"

## Use TLS but skip chain & host verification
# insecure_skip_verify = false

## When true, metrics will be sent in one MQTT message per flush. Otherwise,
## metrics are written one metric per MQTT message.
## DEPRECATED: Use layout option instead
# batch = false

## When true, metric will have RETAIN flag set, making broker cache entries until someone
## actually reads it
# retain = false

## Layout of the topics published.
## The following choices are available:
##   non-batch -- send individual messages, one for each metric
##   batch     -- send all metric as a single message per MQTT topic
## NOTE: The following options will ignore the 'data_format' option and send single values
##   field     -- send individual messages for each field, appending its name to the metric topic
##   homie-v4  -- send metrics with fields and tags according to the 4.0.0 specs
##                see https://homieiot.github.io/specification/
# layout = "homie-v4"

## HOMIE specific settings
## The following options provide templates for setting the device name
## and the node-ID for the topics. Both options are MANDATORY and can contain
## {{ .PluginName }} (metric name), {{ .Tag "key"}} (tag reference to 'key')
## or constant strings. The templays MAY NOT contain slashes!
# homie_device_name = "homie"
# homie_node_id = "id"

## Each data format has its own unique set of configuration options, read
## more about them here:
## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_OUTPUT.md
data_format = "json"

## NOTE: Due to the way TOML is parsed, tables must be at the END of the
## plugin definition, otherwise additional config options are read as part of
## the table

## Optional MQTT 5 publish properties
## These setting only apply if the "protocol" property is set to 5. This must
## be defined at the end of the plugin settings, otherwise TOML will assume
## anything else is part of this table. For more details on publish properties
## see the spec:
## https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901109
# [outputs.mqtt.v5]
#   content_type = ""
#   response_topic = ""
#   message_expiry = "0s"
#   topic_alias = 0
# [outputs.mqtt.v5.user_properties]
#   "key1" = "value 1"
#   "key2" = "value 2"